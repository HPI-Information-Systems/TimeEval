from durations import Duration
from typing import Any, Dict, Optional

from timeeval import Algorithm, TrainingType, InputDimensionality
from timeeval.adapters import DockerAdapter
from timeeval.params import ParameterConfig, FullParameterGrid
{% if post_process_block is defined %}

import numpy as np


{% endif %}
{{ post_process_block }}

_{{ image_name }}_parameters: Dict[str, Dict[str, Any]] = {% if parameters is defined -%}
    {{ parameters }}
{% else -%}
    {}
{% endif %}


def {{ image_name }}(params: ParameterConfig = None, skip_pull: bool = {{ skip_pull }}, timeout: Optional[Duration] = None) -> Algorithm:
    return Algorithm(
        name="{{ name }}",
        main=DockerAdapter(
            image_name="mut:5000/akita/{{ image_name }}",
{% if image_tag is defined %}
            tag="{{ image_tag }}",
{% endif %}
            skip_pull=skip_pull,
            timeout=timeout,
            group_privileges="{{ group_privileges|default("akita") }}",
{% if memory_limit_overwrite is defined %}
            memory_limit_overwrite="{{ memory_limit_overwrite }}",
{% endif %}
{% if cpu_limit_overwrite is defined %}
            cpu_limit_overwrite="{{ cpu_limit_overwrite }}",
{% endif %}
        ),
        preprocess={{ preprocess|default(None) }},
        postprocess={{ postprocess|default(None) }},
        params=_{{ image_name }}_parameters,
        param_grid=params or FullParameterGrid({}),
        data_as_file=True,
        training_type={% if training_type|lower == "unsupervised" -%}
                          TrainingType.UNSUPERVISED
                      {%- elif training_type|lower == "semi-supervised" -%}
                          TrainingType.SEMI_SUPERVISED
                      {%- else -%}
                          TrainingType.SUPERVISED
                      {%- endif %},
        input_dimensionality=InputDimensionality("{{ input_dimensionality|lower }}")
    )
